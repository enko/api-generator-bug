import { Http } from '@angular/http';
import { SDKModels } from './SDKModels';
import { BaseLoopBackApi } from '../core/base.service';
import { LoopBackAuth } from '../core/auth.service';
import { LoopBackFilter, AccessToken } from '../../models/BaseModels';
import { JSONSearchParams } from '../core/search.params';
import { ErrorHandler } from '../core/error.service';
import { Observable } from 'rxjs/Rx';
export declare class UserApi extends BaseLoopBackApi {
    protected http: Http;
    protected models: SDKModels;
    protected auth: LoopBackAuth;
    protected searchParams: JSONSearchParams;
    protected errorHandler: ErrorHandler;
    constructor(http: Http, models: SDKModels, auth: LoopBackAuth, searchParams: JSONSearchParams, errorHandler: ErrorHandler);
    findByIdAccessTokens(id: any, fk: any): Observable<any>;
    destroyByIdAccessTokens(id: any, fk: any): Observable<any>;
    updateByIdAccessTokens(id: any, fk: any, data?: any): Observable<any>;
    getAccessTokens(id: any, filter?: LoopBackFilter): Observable<any>;
    createAccessTokens(id: any, data?: any): Observable<any>;
    deleteAccessTokens(id: any): Observable<any>;
    countAccessTokens(id: any, where?: any): Observable<any>;
    patchOrCreate(data?: any): Observable<any>;
    patchAttributes(id: any, data?: any): Observable<any>;
    login(credentials: any, include?: any, rememberMe?: boolean): Observable<any>;
    logout(): Observable<any>;
    verify(id: any): Observable<any>;
    confirm(uid: any, token: any, redirect?: any): Observable<any>;
    resetPassword(options: any): Observable<any>;
    changePassword(oldPassword: any, newPassword: any): Observable<any>;
    setPassword(newPassword: any): Observable<any>;
    createManyAccessTokens(id: any, data?: any[]): Observable<any>;
    getCurrent(): Observable<any>;
    getCachedCurrent(): any;
    getCurrentToken(): AccessToken;
    isAuthenticated(): boolean;
    getCurrentId(): any;
    getModelName(): string;
}
