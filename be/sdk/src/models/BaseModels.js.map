{"version":3,"file":"BaseModels.js","sourceRoot":"","sources":["BaseModels.ts"],"names":[],"mappings":";;AAsBA;IAOE,YAAY,IAA2B;QACrC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAKM,MAAM,CAAC,YAAY;QACxB,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAOM,MAAM,CAAC,OAAO,CAAC,IAA0B;QAC9C,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAQM,MAAM,CAAC,kBAAkB;QAC9B,MAAM,CAAC;YACL,IAAI,EAAE,aAAa;YACnB,MAAM,EAAE,cAAc;YACtB,UAAU,EAAE;gBACV,IAAI,EAAE;oBACJ,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,QAAQ;iBACf;gBACD,KAAK,EAAE;oBACL,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,OAAO;iBACjB;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,YAAY;iBACnB;gBACD,SAAS,EAAE;oBACT,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,MAAM;iBACb;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,MAAM;iBACd;aACF;SACF,CAAA;IACH,CAAC;CACF;AArED,kCAqEC;AAED;IAQE,YAAY,IAA2B;QAPvC,OAAE,GAAQ,IAAI,CAAC;QACf,QAAG,GAAW,IAAI,CAAC;QACnB,WAAM,GAAQ,IAAI,CAAC;QACnB,YAAO,GAAQ,IAAI,CAAC;QACpB,WAAM,GAAQ,IAAI,CAAC;QACnB,SAAI,GAAQ,IAAI,CAAC;QACjB,eAAU,GAAY,IAAI,CAAC;QAEzB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;CACF;AAXD,4BAWC","sourcesContent":["/* tslint:disable */\n\ndeclare var Object: any;\nexport interface LoopBackFilter {\n  fields?: any;\n  include?: any;\n  limit?: any;\n  order?: any;\n  skip?: any;\n  offset?: any;\n  where?: any;\n}\n\nexport interface AccessTokenInterface {\n  \"id\"?: string;\n  \"ttl\"?: number;\n  \"scopes\"?: [\"string\"];\n  \"created\"?: Date;\n  \"userId\"?: string;\n  \"user\"?: any;\n}\n\nexport class AccessToken implements AccessTokenInterface {\n  \"id\": string;\n  \"ttl\": number;\n  \"scopes\": [\"string\"];\n  \"created\": Date;\n  \"userId\": string;\n  \"user\": any;\n  constructor(data?: AccessTokenInterface) {\n    Object.assign(this, data);\n  }\n  /**\n   * The name of the model represented by this $resource,\n   * i.e. `AccessToken`.\n   */\n  public static getModelName() {\n    return \"AccessToken\";\n  }\n  /**\n  * @method factory\n  * @author Jonathan Casarrubias\n  * @license MIT\n  * This method creates an instance of AccessToken for dynamic purposes.\n  **/\n  public static factory(data: AccessTokenInterface): AccessToken{\n    return new AccessToken(data);\n  }  \n  /**\n  * @method getModelDefinition\n  * @author Julien Ledun\n  * @license MIT\n  * This method returns an object that represents some of the model\n  * definitions.\n  **/\n  public static getModelDefinition() {\n    return {\n      name: 'AccessToken',\n      plural: 'AccessTokens',\n      properties: {\n        \"id\": {\n          name: 'id',\n          type: 'string'\n        },\n        \"ttl\": {\n          name: 'ttl',\n          type: 'number',\n          default: 1209600\n        },\n        \"scopes\": {\n          name: 'scopes',\n          type: '[\"string\"]'\n        },\n        \"created\": {\n          name: 'created',\n          type: 'Date'\n        },\n        \"userId\": {\n          name: 'userId',\n          type: 'string'\n        },\n      },\n      relations: {\n        user: {\n          name: 'user',\n          type: 'User',\n          model: 'User'\n        },\n      }\n    }\n  }\n}\n\nexport class SDKToken implements AccessTokenInterface {\n  id: any = null;\n  ttl: number = null;\n  scopes: any = null;\n  created: any = null;\n  userId: any = null;\n  user: any = null;\n  rememberMe: boolean = null;\n  constructor(data?: AccessTokenInterface) {\n    Object.assign(this, data);\n  }\n}\n/**\n* This GeoPoint represents both, LoopBack and MongoDB GeoPoint\n**/\nexport interface GeoPoint  {\n    lat?: number;\n    lng?: number;\n    type?: string;\n    coordinates?: number[];\n}\n\nexport interface StatFilter {\n    range: string,\n    custom?: {\n      start: string,\n      end: string\n    },\n    where?: {},\n    groupBy?: string\n}\n"]}