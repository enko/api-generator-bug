{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/services/core/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\ndeclare var Object: any;\nimport { Injectable, Inject } from '@angular/core';\nimport { InternalStorage } from '../../storage/storage.swaps';\nimport { SDKToken } from '../../models/BaseModels';\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module SocketConnection\n* @license MIT\n* @description\n* This module handle socket connections and return singleton instances for each\n* connection, it will use the SDK Socket Driver Available currently supporting\n* Angular 2 for web, NativeScript 2 and Angular Universal.\n**/\n@Injectable()\nexport class LoopBackAuth {\n  /**\n   * @type {SDKToken}\n   **/\n  private token: SDKToken = new SDKToken();\n  /**\n   * @type {string}\n   **/\n  protected prefix: string = '$LoopBackSDK$';\n  /**\n   * @method constructor\n   * @param {InternalStorage} storage Internal Storage Driver\n   * @description\n   * The constructor will initialize the token loading data from storage\n   **/\n  constructor(@Inject(InternalStorage) protected storage: InternalStorage) {\n    this.token.id = this.load('id');\n    this.token.user = this.load('user');\n    this.token.userId = this.load('userId');\n    this.token.created = this.load('created');\n    this.token.ttl = this.load('ttl');\n    this.token.rememberMe = this.load('rememberMe');\n  }\n  /**\n   * @method setRememberMe\n   * @param {boolean} value Flag to remember credentials\n   * @return {void}\n   * @description\n   * This method will set a flag in order to remember the current credentials\n   **/\n  public setRememberMe(value: boolean): void {\n    this.token.rememberMe = value;\n  }\n  /**\n   * @method setUser\n   * @param {any} user Any type of user model\n   * @return {void}\n   * @description\n   * This method will update the user information and persist it if the\n   * rememberMe flag is set.\n   **/\n  public setUser(user: any) {\n    this.token.user = user;\n    this.save();\n  }\n  /**\n   * @method setToken\n   * @param {SDKToken} token SDKToken or casted AccessToken instance\n   * @return {void}\n   * @description\n   * This method will set a flag in order to remember the current credentials\n   **/\n  public setToken(token: SDKToken): void {\n    this.token = Object.assign(this.token, token);\n    this.save();\n  }\n  /**\n   * @method getToken\n   * @return {void}\n   * @description\n   * This method will set a flag in order to remember the current credentials.\n   **/\n  public getToken(): SDKToken {\n    return <SDKToken>this.token;\n  }\n  /**\n   * @method getAccessTokenId\n   * @return {string}\n   * @description\n   * This method will return the actual token string, not the object instance.\n   **/\n  public getAccessTokenId(): string {\n    return this.token.id;\n  }\n  /**\n   * @method getCurrentUserId\n   * @return {any}\n   * @description\n   * This method will return the current user id, it can be number or string.\n   **/\n  public getCurrentUserId(): any {\n    return this.token.userId;\n  }\n  /**\n   * @method getCurrentUserData\n   * @return {any}\n   * @description\n   * This method will return the current user instance.\n   **/\n  public getCurrentUserData(): any {\n    return (typeof this.token.user === 'string') ? JSON.parse(this.token.user) : this.token.user;\n  }\n  /**\n   * @method save\n   * @return {boolean} Wether or not the information was saved\n   * @description\n   * This method will save in either local storage or cookies the current credentials.\n   * But only if rememberMe is enabled.\n   **/\n  public save(): boolean {\n    if (this.token.rememberMe) {\n      this.persist('id', this.token.id);\n      this.persist('user', this.token.user);\n      this.persist('userId', this.token.userId);\n      this.persist('created', this.token.created);\n      this.persist('ttl', this.token.ttl);\n      this.persist('rememberMe', this.token.rememberMe);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * @method load\n   * @param {string} prop Property name\n   * @return {any} Any information persisted in storage\n   * @description\n   * This method will load either from local storage or cookies the provided property.\n   **/\n  protected load(prop: string): any {\n    return this.storage.get(`${this.prefix}${prop}`);\n  }\n  /**\n   * @method clear\n   * @return {void}\n   * @description\n   * This method will clear cookies or the local storage.\n   **/\n  public clear(): void {\n    Object.keys(this.token).forEach((prop: string) => this.storage.remove(`${this.prefix}${prop}`));\n    this.token = new SDKToken();\n  }\n  /**\n   * @method clear\n   * @return {void}\n   * @description\n   * This method will clear cookies or the local storage.\n   **/\n  protected persist(prop: string, value: any): void {\n    try {\n      this.storage.set(\n        `${this.prefix}${prop}`,\n        (typeof value === 'object') ? JSON.stringify(value) : value\n      );\n    }\n    catch (err) {\n      console.error('Cannot access local/session storage:', err);\n    }\n  }\n}\n"]}