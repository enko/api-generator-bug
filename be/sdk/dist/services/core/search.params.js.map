{"version":3,"file":"search.params.js","sourceRoot":"","sources":["../../../src/services/core/search.params.ts"],"names":[],"mappings":";;;;;;;;AACA,wCAA2C;AAC3C,wCAAgD;AAWhD,IAAa,gBAAgB,GAA7B;IAIW,OAAO,CAAC,GAAQ;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,sBAAe,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,kBAAkB;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEO,SAAS,CAAC,GAAQ,EAAE,MAAW;QACnC,IAAI,KAAK,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC;YACpB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEO,WAAW,CAAC,GAAW,EAAE,KAAU,EAAE,MAAc;QACvD,IAAI,YAAY,GAAG,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QAC3D,EAAE,CAAC,CAAC,KAAK,IAAI,CAAS,CAAC,OAAO,KAAK,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QACD,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,KAAK,CAAC;IACtC,CAAC;CACJ,CAAA;AA1BY,gBAAgB;IAD5B,iBAAU,EAAE;GACA,gBAAgB,CA0B5B;AA1BY,4CAAgB","sourcesContent":["/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { URLSearchParams } from '@angular/http';\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module JSONSearchParams\n* @license MIT\n* @description\n* JSON Parser and Wrapper for the Angular2 URLSearchParams\n* This module correctly encodes a json object into a query string and then creates\n* an instance of the URLSearchParams component for later use in HTTP Calls\n**/\n@Injectable()\nexport class JSONSearchParams {\n\n    private _usp: URLSearchParams;\n\n    public setJSON(obj: any) {\n        this._usp = new URLSearchParams(this._JSON2URL(obj, false));\n    }\n\n    public getURLSearchParams(): URLSearchParams {\n        return this._usp;\n    }\n\n    private _JSON2URL(obj: any, parent: any) {\n        var parts: any = [];\n        for (var key in obj)\n        parts.push(this._parseParam(key, obj[key], parent));\n        return parts.join('&');\n    }\n\n    private _parseParam(key: string, value: any, parent: string) {\n        let processedKey = parent ? parent + '[' + key + ']' : key;\n        if (value && (<string>(typeof value) === 'object' || Array.isArray(value))) {\n            return this._JSON2URL(value, processedKey);\n        }\n        return processedKey + '=' + value;\n    }\n}\n"]}